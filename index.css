.cssFonts {
    font-family: 'Courier New', Courier, monospace;
    font-size: 33px; /* 1px = 1/96inch */
    font-weight: bold;
    font-style: oblique;
    font-variant: small-caps;
    line-height: 1.3em;
}

.cssColors {
    color: red;
    background-color: blueviolet;
}

.bordersAndBackgrounds {
    background-color: red;
    height: 30px;
    width: 50px;
    border-width: 4px;
    border-color: green;
    border-style: solid;
    border-radius: 3px;

    /* border: 4px solid green */

    border-top: 2px solid orange;
    border-right: 2px solid rgb(35, 148, 163);
    border-left: 2px solid rgb(54, 129, 18);
    border-bottom: 2px solid rgb(112, 99, 76);

    border-top-left-radius: 2px;
    border-bottom-left-radius: 2px;
    border-top-right-radius: 2px;
    border-bottom-right-radius: 2px;
}

.image {
    height: 500px;
    width: 100px;
    background-image: none;
    border: 10px solid rgb(142, 88, 196);
    background-repeat: no-repeat;
    /* background-repeat: repeat-x; */
    /* background-repeat: repeat-y; */
    background-position: center center;
    /* background-position: top center; */
    /* background-position: bottom right; */
}

.padding {
    /* padding-top: 30px;
    padding-right: 40px;
    padding-bottom: 50px;
    padding-left: 60px; */

    padding: 30px 40px 50px 60px; /* top right bottom left */
}

.margin {
    /* margin-top: 30px;
    margin-right: 40px;
    margin-bottom: 50px;
    margin-left: 60px; */

    margin: 30px 40px 50px 60px; /* top right bottom left */

    /* margin: auto;   :- It will be horizontally centered because it has margin: auto; */
}

* {
    box-sizing: border-box;  /* This causes the element to maintain its width; if you 
    increase the padding, the available content space will decrease. */
}

.floatAndClear {
    /* The float property is used for positioning and formatting content 
    e.g. let an image float left to the text in a container. */
    float: left;
    float: right;
    float: none;

    /* The clear property specifies what elements can float beside the cleared element
     and on which side. */
    clear: left;
    clear: right;
    clear: both;

    /* If an element is taller than the element containing it, and it is floated, 
    it will "overflow" outside of its container */
    overflow: auto;
}

/* a is link */
.a {
    text-decoration: none;
    color: black;

}

a:hover {
    color: rgb(116, 72, 14);
}

a:visited {
    background-color: red;
}

a:active{
    background-color: yellow;
}


.display {
    display: block;
    display: inline;
    display: inline-block;
}

.position {
    position: static;
    position: relative;
    position: absolute;
    position: fixed;
    position: sticky;
}

.visibilityAnd_z-index {
    visibility: hidden; /* will hide the element but will show its empty space */

    display: none; /* will hide the element and the space */

    z-index: -1; /* will work only for position: relative, absolute, fixed, or sticky */
    position: relative;
}

.flex-container {
    display: flex;

    flex-direction: column;
    flex-direction: column-reverse;
    flex-direction: row;
    flex-direction: row-reverse;

    flex-wrap: nowrap; /* default */
    flex-wrap: wrap;
    flex-wrap: wrap-reverse;

    /* The flex-flow property is a shorthand property for setting both the flex-direction and flex-wrap properties */
    flex-flow: row wrap;

    /* Horizontally aligns the flex items when the items do not use all available space on the main-axis */
    justify-content: center;
    justify-content: flex-start;
    justify-content: flex-end;
    justify-content: space-around;
    justify-content: space-between;
    justify-content: space-evenly;

    /* Vertically aligns the flex items when the items do not use all available space on the cross-axis */
    align-items: center;
    align-items: flex-start;
    align-items: flex-end;

    /* Modifies the behavior of the flex-wrap property. It is similar to align-items, but instead of aligning
     flex items, it aligns flex lines */
    align-content: center; /* I find difficulty understanding align content */
}

.flex-container div {
    /* The order property can change the order of the flex items */
    order: 2;

    /* The flex-grow property specifies how much a flex item will grow relative to the rest of the flex items */
    /* The value must be a number, default value is 0. */
    flex-grow: 2;

    /* The flex-shrink property specifies how much a flex item will shrink relative to the rest of the flex items */
    /* The value must be a number, default value is 1. */
    flex-shrink: 2;

    /* when flex-direction: is set to row then flex-basis: will control width */
    /* when flex-direction: is set to column then flex-basis: will control height */
    /* The flex-basis property specifies the initial length of a flex item */
    flex-basis: 20px;

    /* The flex property is a shorthand property for the flex-grow, flex-shrink, and flex-basis properties */
    flex: 0 0 200px;

    /* Specifies the alignment for a flex item (overrides the flex container's align-items property) */
    align-self: center;
    align-self: flex-start;
    align-self: flex-end;
}

/* More on CSS selectors */
div > p {
    background-color: cyan;
}

div + p {
    background-color: aliceblue;
}

input[type="text"] {
    padding: 10px;
    border: 2px solid red;
}

a[target] {
    color:rgb(35, 148, 163)
}

a[target="_blank"]{
    color: aliceblue;
}

li:nth-child(2n + 0) {
    background-color: aqua;
}

li:nth-child(odd) {
    background-color: red;
}

li:nth-child(even) {
    background-color: green;
}

header::before {
    background: url("https://source.unsplash.com/user/erondu/1600x900") no-repeat center center/cover;
    content: "";
    position: absolute;
    top: 0px;
    left: 0px;
    width: 100%;
    height: 100%;
    z-index: -1;
    opacity: 0.3;
}

header::after {
    content: "This is extra para";
    color: brown;
}
/* That's all for CSS selectors */

.box_shadowAndtext_shadow {
    box-shadow: 3px 5px green;
    /* offset-x offset-y blur-radius spread-radius color  */
    box-shadow: 3px 5px 6px 6px green;
    box-shadow: -3px -5px 3px 3px green;

    box-shadow: inset 2px 3px 2px 2px green; /* inside the box */
    box-shadow: 3px 5px green, 5px 10px red; /* mixing multiple shadows */

    text-shadow: 2px 3px white;
    text-shadow: 2px 3px 3px white;
}













/* YAHOO BABA */




                /* Topic :- Descendant Selector */

#header a{
    color: red;
}

.list p{
    color: red;
}

ul#menu li{
    color: red;
}





                /* Topic :- Border Shorthand */

/* border: 2px solid green;
border: 2px dashed red; */





                /* Topic :- Outline Shorthand */

/* An outline is a line that is drawn around elements, OUTSIDE the borders, to make the element "stand out". */
/* outline: 2px solid green; */

/* The outline-offset property adds space between an outline and the edge/border of an element.The space between an element and its outline is transparent*/
/* outline-offset: 5px; */





                /* Topic :- Height and Width */

/* height	:- Sets the height of an element
max-height	:- Sets the maximum height of an element
max-width	:- Sets the maximum width of an element
min-height	:- Sets the minimum height of an element
min-width	:- Sets the minimum width of an element
width	    :- Sets the width of an element */





                /* Overflow */

/* The overflow property specifies whether to clip the content or to add scrollbars when the content of an element is too big to fit in the specified area.

The overflow property has the following values:

visible - Default. The overflow is not clipped. The content renders outside the element's box
hidden - The overflow is clipped, and the rest of the content will be invisible
scroll - The overflow is clipped, and a scrollbar is added to see the rest of the content
auto - Similar to scroll, but it adds scrollbars only when necessary */

/* Note: The overflow property only works for block elements with a specified height. */





                /* CSS Shadows */

/* box-shadow	Adds one or more shadows to an element
   text-shadow	Adds one or more shadows to a text */

/* box-shadow: 2px 2px 5px 10px orange;     {horizontal offset(y-axis), vertical offset(x-axis), blur, spread, colour} */
/* box-shadow: 2px 2px 5px 10px orange, 4px 4px 5px 10px red, 6px 6px 5px 10px red;   {multiple shadows} */
/* box-shadow: 2px 2px 5px 10px orange inset;   {inset is used to make shadow inside box} */





                /* CSS Text */

.text {
    text-align: center;
    text-transform: uppercase;
    text-align-last: right;
    text-indent: 50px;
    word-spacing: 10px;
    letter-spacing: 4px;

    /* Text Decoration  */

    text-decoration-line: underline;
    text-decoration-color: red;
    text-decoration-style: wavy;  /* solid default */

    text-decoration: underline red solid;   /* text decoration shorthand */
}